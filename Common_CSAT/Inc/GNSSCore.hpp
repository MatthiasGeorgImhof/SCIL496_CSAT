#ifndef INC_GNSS_CORE_H_
#define INC_GNSS_CORE_H_

#include <cstdint>
#include <optional>

#include "GNSSCore.hpp"

struct UniqueID
{
	uint8_t id[6]; // Unique ID of the GNSS module
};

struct UTCTime
{
	uint16_t year;
	uint8_t month, day, hour, min, sec;
	int32_t nano;
	uint32_t tAcc;
	uint8_t valid; // Flags related to time validity
};

struct PositionLLH
{
	int32_t lon, lat;	  // Geodetic position (degrees * 10^-7)
	int32_t height, hMSL; // Geodetic position (millimeters)
	uint32_t hAcc, vAcc;  // Accuracy estimates (millimeters)
};

struct PositionECEF
{
	int32_t ecefX, ecefY, ecefZ; // Earth-centered, Earth-fixed coordinates (centimeters)
	uint32_t pAcc;				 // Position accuracy (centimeters)
};

struct VelocityNED
{
	int32_t velN, velE, velD; // Velocity components (centimeters/second)
	int32_t headMot;		  // Heading of motion (degrees * 10^-5)
	uint32_t speed, gSpeed;	  // Ground speed (centimeters/second)
	uint32_t sAcc, headAcc;	  // Speed and heading accuracy (centimeters/second, degrees * 10^-5)
};

struct VelocityECEF
{
	int32_t ecefVX, ecefVY, ecefVZ; // ECEF velocity components (centimeters/second)
	uint32_t sAcc;					// Speed accuracy (centimeters/second)
};

struct NavigationPVT
{
	UTCTime utcTime;
	PositionLLH position;
	VelocityNED velocity;
	int8_t fixType; // Navigation fix type
	uint8_t numSV;	// Number of satellites used
};

// Helper function to calculate checksum for static asserts
static constexpr void CalculateChecksum(const uint8_t *payload, size_t size, uint8_t *cka, uint8_t *ckb)
{
	*cka = 0;
	*ckb = 0;
	for (size_t i = 2; i < size - 2; ++i)
	{ // Skip sync chars and last 2 checksum bytes
		*cka += payload[i];
		*ckb += *cka;
	}
}

// Helper function to validate checksum within static assert
template <size_t Size>
static constexpr bool ValidateChecksum(const uint8_t (&payload)[Size])
{
	uint8_t cka_calc, ckb_calc;
	CalculateChecksum(payload, Size, &cka_calc, &ckb_calc);
	return (cka_calc == payload[Size - 2]) && (ckb_calc == payload[Size - 1]);
}

class GNSSCore
{
public:
	static UniqueID parseUniqID(uint8_t *messageBuffer);
	static UTCTime parseNavTimeUTC(uint8_t *messageBuffer);
	static PositionLLH parseNavPosLLH(uint8_t *messageBuffer);
	static PositionECEF parseNavPosECEF(uint8_t *messageBuffer);
	static NavigationPVT parseNavPVT(uint8_t *messageBuffer);
	static VelocityECEF parseNavVelECEF(uint8_t *messageBuffer);
	static VelocityNED parseNavVelNED(uint8_t *messageBuffer);

	static uint8_t getUByte(const uint8_t *uartWorkingBuffer, uint16_t offset);
	static int8_t getIByte(const uint8_t *uartWorkingBuffer, uint16_t offset);
	static uint16_t getUShort(const uint8_t *uartWorkingBuffer, uint16_t offset);
	static int16_t getIShort(const uint8_t *uartWorkingBuffer, uint16_t offset);
	static uint32_t getULong(const uint8_t *uartWorkingBuffer, uint16_t offset);
	static int32_t getILong(const uint8_t *uartWorkingBuffer, uint16_t offset);

	static void checksum(uint16_t dataLength, const uint8_t *payload, uint8_t *cka, uint8_t *ckb);

public:
	static constexpr uint8_t CONFIG_UBX[] = {0xB5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD0, 0x08, 0x00, 0x00, 0x80, 0x25, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9A, 0x79};
	static constexpr uint8_t SET_NMEA_410[] = {0xB5, 0x62, 0x06, 0x17, 0x14, 0x00, 0x00, 0x41, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x57};
	// Activation of navigation system: Galileo, Glonass, GPS, SBAS, IMES

	static constexpr uint8_t SET_GNSS[] = {0xB5, 0x62, 0x06, 0x3E, 0x24, 0x00, 0x00, 0x00, 0x20, 0x04, 0x00, 0x08, 0x10, 0x00, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x03, 0x00, 0x01, 0x00, 0x01, 0x01, 0x02, 0x04, 0x08, 0x00, 0x01, 0x00, 0x01, 0x01, 0x06, 0x08, 0x0E, 0x00, 0x01, 0x00, 0x01, 0x01, 0xDF, 0xFB};
	static constexpr uint8_t GET_UNIQUE_ID[] = {0xB5, 0x62, 0x27, 0x03, 0x00, 0x00, 0x2A, 0xA5};
	static constexpr uint8_t GET_NAV_TIME_UTC[] = {0xB5, 0x62, 0x01, 0x21, 0x00, 0x00, 0x22, 0x67};
	static constexpr uint8_t GET_NAV_POS_LLH[] = {0xB5, 0x62, 0x01, 0x02, 0x00, 0x00, 0x03, 0x0A};
	static constexpr uint8_t GET_NAV_POS_ECEF[] = {0xB5, 0x62, 0x01, 0x01, 0x00, 0x00, 0x02, 0x07};
	static constexpr uint8_t GET_NAV_PVT[] = {0xB5, 0x62, 0x01, 0x07, 0x00, 0x00, 0x08, 0x19};
	static constexpr uint8_t GET_NAV_VEL_ECEF[] = {0xB5, 0x62, 0x01, 0x11, 0x00, 0x00, 18, 55};
	static constexpr uint8_t GET_NAV_VEL_NED[] = {0xB5, 0x62, 0x01, 0x12, 0x00, 0x00, 19, 58};

	static constexpr uint8_t SET_PORTABLE_MODE[] = {0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x5E, 0x01, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x3C};
	static constexpr uint8_t SET_STATIONARY_MODE[] = {0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x5E, 0x01, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80};
	static constexpr uint8_t SET_PEDESTRIAN_MODE[] = {0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x5E, 0x01, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xA2};
	static constexpr uint8_t SET_AUTOMOTIVE_MODE[] = {0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x5E, 0x01, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0xC4};
	static constexpr uint8_t SET_SEA_MODE[] = {0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x05, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x5E, 0x01, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xE6};
	static constexpr uint8_t SET_AIRBORNE_1G_MODE[] = {0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x5E, 0x01, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x08};
	static constexpr uint8_t SET_AIRBORNE_2G_MODE[] = {0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x5E, 0x01, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x2A};
	static constexpr uint8_t SET_AIRBORNE_4G_MODE[] = {0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x08, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x5E, 0x01, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x4C};
	static constexpr uint8_t SET_WRIST_MODE[] = {0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x09, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x5E, 0x01, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x6E};
	static constexpr uint8_t SET_BIKE_MODE[] = {0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x0A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x5E, 0x01, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x90};

	static_assert(ValidateChecksum(CONFIG_UBX), "CONFIG_UBX checksum validation failed");
	static_assert(ValidateChecksum(SET_NMEA_410), "SET_NMEA_410 checksum validation failed");
	static_assert(ValidateChecksum(SET_GNSS), "SET_GNSS checksum validation failed");
	static_assert(ValidateChecksum(GET_UNIQUE_ID), "GET_UNIQUE_ID checksum validation failed");
	static_assert(ValidateChecksum(GET_NAV_TIME_UTC), "GET_NAV_TIME_UTC checksum validation failed");
	static_assert(ValidateChecksum(GET_NAV_POS_LLH), "GET_NAV_POS_LLH checksum validation failed");
	static_assert(ValidateChecksum(GET_NAV_POS_ECEF), "GET_NAV_POS_ECEF checksum validation failed");
	static_assert(ValidateChecksum(GET_NAV_PVT), "GET_NAV_PVT checksum validation failed");
	static_assert(ValidateChecksum(GET_NAV_VEL_ECEF), "GET_NAV_VEL_ECEF checksum validation failed");
	static_assert(ValidateChecksum(GET_NAV_VEL_NED), "GET_NAV_VEL_NED checksum validation failed");
	static_assert(ValidateChecksum(SET_PORTABLE_MODE), "SET_PORTABLE_MODE checksum validation failed");
	static_assert(ValidateChecksum(SET_STATIONARY_MODE), "SET_STATIONARY_MODE checksum validation failed");
	static_assert(ValidateChecksum(SET_PEDESTRIAN_MODE), "SET_PEDESTRIAN_MODE checksum validation failed");
	static_assert(ValidateChecksum(SET_AUTOMOTIVE_MODE), "SET_AUTOMOTIVE_MODE checksum validation failed");
	static_assert(ValidateChecksum(SET_SEA_MODE), "SET_SEA_MODE checksum validation failed");
	static_assert(ValidateChecksum(SET_AIRBORNE_1G_MODE), "SET_AIRBORNE_1G_MODE checksum validation failed");
	static_assert(ValidateChecksum(SET_AIRBORNE_2G_MODE), "SET_AIRBORNE_2G_MODE checksum validation failed");
	static_assert(ValidateChecksum(SET_AIRBORNE_4G_MODE), "SET_AIRBORNE_4G_MODE checksum validation failed");
	static_assert(ValidateChecksum(SET_WRIST_MODE), "SET_WRIST_MODE checksum validation failed");
	static_assert(ValidateChecksum(SET_BIKE_MODE), "SET_BIKE_MODE checksum validation failed");
};

#endif /* INC_GNSS_CORE_H_ */
